#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_control_flow_attributes : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require

#ifdef VALIDATE 
#extension GL_EXT_debug_printf : enable
#endif

// GLSL wants this for uint64_t -> accel struct conversion
#extension GL_EXT_ray_tracing : require

#include "common.glsl"
#include "sampler.glsl"

layout (push_constant, scalar) uniform PushConstant {
    CoverPushConst push_const;
};

layout (set = 0, binding = 0) readonly buffer Positions {
    vec4 positions[];
};

layout (set = 0, binding = 1) buffer Counter {
    uint32_t numCandidates;
};

layout (set = 0, binding = 2, scalar) writeonly buffer Candidates {
    CandidatePair candidates[];
};

layout (set = 0, binding = 3, scalar) readonly buffer Voxels {
    GPUAABB voxels[];
};

layout (local_size_x = 32,
        local_size_y = 1,
        local_size_z = 1) in;
void findCandidates()
{
    uint32_t voxel_idx = gl_GlobalInvocationID.x;
    uint32_t ground_idx = gl_GlobalInvocationID.y + push_const.idxOffset;

    if (voxel_idx >= push_const.numVoxels ||
        ground_idx >= push_const.numGroundSamples) {
        return;
    }

    Sampler rng = makeSampler(ground_idx * push_const.numVoxels + voxel_idx,
                              push_const.idxOffset);

    vec3 base_origin = positions[ground_idx].xyz;
    base_origin.y += push_const.eyeHeight;

    GPUAABB voxel = voxels[voxel_idx];
    vec3 voxel_min = vec3(voxel.pMinX, voxel.pMinY, voxel.pMinZ);
    vec3 voxel_max = vec3(voxel.pMaxX, voxel.pMaxY, voxel.pMaxZ);

    // compute where ground is at voxel center 
    // to ensure voxel starts on ground

    vec3 mid_voxel_pos = mix(voxel_min, voxel_max, 0.5);
    mid_voxel_pos.y = voxel_min.y;

    rayQueryEXT ground_query;
    bool ground_hit = traceRay(ground_query, mid_voxel_pos, 
        vec3(0, 1, 0), 3, LARGE_DISTANCE);

    if (ground_hit) {
        vec3 ground_hit_pos = getWorldSpaceHitCommitted(ground_query);
        float delta_height = ground_hit_pos.y - voxel_min.y;
        if (ground_hit_pos.y < voxel.aabbMaxY) {
            voxel_min.y += delta_height;
            voxel_max.y += delta_height;
            mid_voxel_pos.y += delta_height;
        }
    }

    bool dest_blocked = false;
    for (int i = 0; i < 8; i++) {
        vec3 dest_pos;
        dest_pos.x = (i & 1) == 0 ? voxel_min.x : voxel_max.x;
        dest_pos.y = (i & 2) == 0 ? voxel_min.y : voxel_max.y;
        dest_pos.z = (i & 4) == 0 ? voxel_min.z : voxel_max.z;
        vec3 to_voxel = dest_pos - mid_voxel_pos;
        float to_voxel_len = length(to_voxel);
        to_voxel /= to_voxel_len;

        rayQueryEXT dest_query;
        bool tmp_blocked = traceRay(dest_query, mid_voxel_pos, 
            to_voxel, 3, to_voxel_len);
        dest_blocked = dest_blocked || tmp_blocked;
    }

    bool voxel_visible_from_offset = false;
    bool voxel_visible_from_base = false;
    vec3 hit_pos = vec3(0);
    for (int i = 0; i < push_const.numVoxelTests; i++) {
        vec3 r;
        r.x = samplerGet1D(rng);
        r.y = samplerGet1D(rng);
        r.z = samplerGet1D(rng);
        // compute all voxels visible from sphere of offsets
        for (int u_offset = 0; u_offset < push_const.sqrtOffsetSamples;
             u_offset++) {
            for (int v_offset = 0; v_offset < push_const.sqrtOffsetSamples;
                 v_offset++) {
                vec2 offset_uv =
                    vec2(float(u_offset) / (push_const.sqrtOffsetSamples - 1),
                         float(v_offset) / (push_const.sqrtOffsetSamples - 1));

                vec3 offset_dir = normalize(sphereDir(offset_uv));

                vec3 offset_origin = base_origin + push_const.offsetRadius * offset_dir;

                vec3 to_offset = offset_origin - base_origin;
                float to_offset_len = length(to_offset);
                to_offset /= to_offset_len;

                // This is inefficient, duplicate check is going to 
                // happen tons of times
                rayQueryEXT offset_query;
                bool offset_hit = traceRay(offset_query, base_origin, to_offset, 3,
                                           to_offset_len);

                vec3 pos = mix(voxel_min, voxel_max, r);
                vec3 to_voxel = pos - offset_origin;
                float to_voxel_len = length(to_voxel);
                to_voxel /= to_voxel_len;

                rayQueryEXT voxel_query;
                bool geo_hit = traceRay(voxel_query, offset_origin, to_voxel, 3,
                                        to_voxel_len);
                
                if (!offset_hit && !geo_hit) {
                    voxel_visible_from_offset = true;
                }

                subgroupBarrier();
            }
        }

        // for each point visible in any sphere offset
        // record those not visible from center
        vec3 pos = mix(voxel_min, voxel_max, r);
        vec3 to_voxel = pos - base_origin;
        float to_voxel_len = length(to_voxel);
        to_voxel /= to_voxel_len;

        rayQueryEXT voxel_query;
        bool geo_hit = traceRay(voxel_query, base_origin, to_voxel, 3,
                                to_voxel_len);

        if (!geo_hit) {
            voxel_visible_from_base = true;
        } else {
            hit_pos = getWorldSpaceHitCommitted(voxel_query);
        }

        subgroupBarrier();
    }


    // if visible from an offset on sphere but not from center, then
    // its a corner
    if (voxel_visible_from_offset && !voxel_visible_from_base &&
        !dest_blocked) {
        CandidatePair candidate;
        candidate.origin = base_origin;
        candidate.voxelID = voxel_idx;
        candidate.hitPos = hit_pos;

        uint32_t out_idx = atomicAdd(numCandidates, 1);

        candidates[out_idx] = candidate;
    }
}
