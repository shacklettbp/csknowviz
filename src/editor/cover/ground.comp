#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_control_flow_attributes : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require

#ifdef VALIDATE 
#extension GL_EXT_debug_printf : enable
#endif

// GLSL wants this for uint64_t -> accel struct conversion
#extension GL_EXT_ray_tracing : require

#include "common.glsl"

layout (push_constant, scalar) uniform PushConstant {
    CoverPushConst push_const;
};

layout (set = 0, binding = 0, scalar) buffer Positions {
    vec4 positions[];
};

layout (local_size_x = 32,
        local_size_y = 1,
        local_size_z = 1) in;
void findGround()
{
    uint32_t idx = gl_GlobalInvocationID.x;

    if (idx >= push_const.numGroundSamples) {
        return;
    }

    vec4 data = positions[idx];

    vec3 pos = data.xyz;
    float max_height = data.w;

    rayQueryEXT ray_query;
    bool hit = traceRay(ray_query, pos, vec3(0, 1, 0), 3, LARGE_DISTANCE);

    if (!hit) return;

    vec3 hit_pos = getWorldSpaceHitCommitted(ray_query);

    if (hit_pos.y < max_height) {
        positions[idx].xyz = hit_pos;
    }
}
